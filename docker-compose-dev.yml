# ===============================================================
# DOCKER COMPOSE - APPLICATION FULL-STACK
# Stack : Angular (Frontend) | Spring Boot (Backend) | Keycloak (Auth) | PostgreSQL (DB)
# ===============================================================
# Toutes les variables sont configurables via le fichier .env
# ===============================================================

# Ancres YAML pour factoriser les variables communes
x-common-app-bd-vars: &common-app-bd-vars
  POSTGRES_DB: "${POSTGRES_DB:-app-db}"
  POSTGRES_USER: "${POSTGRES_USER:-db}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

x-common-bd-keycloak-vars: &common-bd-keycloak-vars
  POSTGRES_DB: "${KEYCLOAK_DB:-keycloak}"
  POSTGRES_USER: "${KEYCLOAK_DB_USER:-keycloak}"
  POSTGRES_PASSWORD: "${KEYCLOAK_DB_PASSWORD}"

#x-common-bd-app-keycloak-vars: &common-bd-app-keycloak-vars
#  POSTGRES_DB: "${POSTGRES_DB}"
#  POSTGRES_USER: "${POSTGRES_USER}"
#  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"


services:
  # ===============================================================
  # BASE DE DONNÉES POSTGRESQL POUR L'APPLICATION
  # ===============================================================
  app-db:
    image: "postgres:${POSTGRES_IMAGE_TAG:-16}"
    container_name: "${PROJECT_NAME:-app}-app-db"
    environment:
      <<: *common-app-bd-vars
    ports:
      - "${DB_HOST_PORT:-5432}:5432"
    volumes:
      - app-database-data:/var/lib/postgresql/data
      - ./sql/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - docker-network

  # ===============================================================
  # BASE DE DONNÉES POSTGRESQL POUR KEYCLOAK
  # ===============================================================
  keycloak-db:
    image: "postgres:${POSTGRES_IMAGE_TAG:-16}"
    container_name: "${PROJECT_NAME:-app}-keycloak-db"
    environment:
      <<: *common-bd-keycloak-vars
    ports:
      - "${KEYCLOAK_DB_PORT:-5433}:5432"  # Port différent pour éviter les conflits
    volumes:
      - keycloak-database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${KEYCLOAK_DB_USER}", "-d", "${KEYCLOAK_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - docker-network

  # ===============================================================
  # KEYCLOAK - AUTHENTIFICATION ET AUTORISATION
  # ===============================================================
  keycloak:
    image: "quay.io/keycloak/keycloak:${KEYCLOAK_IMAGE_TAG:-22.0.1}"
    container_name: "${PROJECT_NAME:-app}-keycloak"
    environment:
      # Configuration Base de données
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://${DB_KEYCLOAK_SERVICE_NAME:-keycloak-db}:5432/${KEYCLOAK_DB}"
      KC_DB_USERNAME: "${KEYCLOAK_DB_USER:-keycloak}"
      KC_DB_PASSWORD: "${KEYCLOAK_DB_PASSWORD}"
      # Credentials Admin
      KEYCLOAK_ADMIN: "${KEYCLOAK_ADMIN_USER:-admin}"
      KEYCLOAK_ADMIN_PASSWORD: "${KEYCLOAK_ADMIN_PASSWORD:-admin}"
      # Configuration Réseau
      KC_HOSTNAME: "${KEYCLOAK_HOSTNAME:-localhost}"
      KC_HTTP_PORT: 8080
      KC_HTTPS_PORT: 8443
      KC_HEALTH_ENABLED: true
    ports:
      - "${SECURITE_INTERNAL_PORT:-8080}:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command:
      - start-dev
      - --import-realm
    depends_on:
      keycloak-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - docker-network

  # ===============================================================
  # BACKEND - API SPRING BOOT
  # ===============================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: "${PROJECT_NAME:-app}-backend"
    depends_on:
      app-db:
        condition: service_healthy
      keycloak:
        condition: service_started
    ports:
      - "${BACKEND_INTERNAL_PORT:-8081}:8081"
    environment:
      # Configuration Spring Boot
      BACKEND_INTERNAL_PORT: "${BACKEND_INTERNAL_PORT:-8081}"
      SPRING_PROFILES_ACTIVE: "${SPRING_PROFILES_ACTIVE:-prod}"
      # Configuration Database APPLICATION
      DB_SERVICE_NAME: "app-db"                    # ← Nom du service de base de données
      POSTGRES_DB: "${POSTGRES_DB}"               # ← Nom de la base
      POSTGRES_USER: "${POSTGRES_USER}"           # ← Utilisateur
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"   # ← Mot de passe
      # Configuration Keycloak
      KEYCLOAK_REALM: "${KEYCLOAK_REALM}"
      KEYCLOAK_BACKEND_CLIENT: "${KEYCLOAK_BACKEND_CLIENT}"
      KEYCLOAK_BACKEND_CLIENT_SECRET: "${KEYCLOAK_BACKEND_CLIENT_SECRET}"
      KEYCLOAK_INTERNAL_URL: "${KEYCLOAK_INTERNAL_URL:-http://keycloak:8080}"
      KEYCLOAK_EXTERNAL_URL: "${KEYCLOAK_EXTERNAL_URL:-http://localhost:8080}"

      # Ajouter l'URL pour que le backend puisse atteindre Ollama sur la machine hôte
      OLLAMA_BASE_URL: "http://host.docker.internal:11434"
      # Configuration OpenAI et autres services IA
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      OLLAMA_API_KEY: "${OLLAMA_API_KEY}"
    restart: unless-stopped
    networks:
      - docker-network

  # ===============================================================
  # FRONTEND - APPLICATION ANGULAR
  # ===============================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Variables passées au build-time
        KEYCLOAK_REALM: "${KEYCLOAK_REALM}"
        KEYCLOAK_FRONTEND_CLIENT: "${KEYCLOAK_FRONTEND_CLIENT}"
        KEYCLOAK_INTERNAL_URL: "${KEYCLOAK_INTERNAL_URL}"
        API_URL: "/api"
    container_name: "${PROJECT_NAME:-app}-frontend"
    ports:
      - "${FRONT_HOST_PORT:-4200}:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - docker-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ===============================================================
# VOLUMES PERSISTANTS
# ===============================================================
volumes:
  app-database-data:
    name: "${PROJECT_NAME:-app}-app-data"
  keycloak-database-data:
    name: "${PROJECT_NAME:-app}-keycloak-data"

# ===============================================================
# RÉSEAUX
# ===============================================================
networks:
  docker-network:
    name: "${NETWORK_NAME:-${PROJECT_NAME:-app}-network}"
    driver: bridge
