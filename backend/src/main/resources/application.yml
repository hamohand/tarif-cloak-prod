# ===================================================
# CONFIGURATION SERVEUR
# ===================================================
server:
  port: ${BACKEND_INTERNAL_PORT:8081}

  # ===================================================
  # CONFIGURATION BASE DE DONNÉES APPLICATION
  # ===================================================
spring:
  application:
    name: backend
  datasource:
    url: jdbc:postgresql://${DB_SERVICE_NAME:app-db}:5432/${POSTGRES_DB}?characterEncoding=UTF-8
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update  #Devloppemment
    #  ddl-auto: validate  #En production , utilisez 'validate' ou Flyway/Liquibase
    show-sql: false

  # ===================================================
  # CONFIGURATION KEYCLOAK (OAuth2 Resource Server)
  # ===================================================
  security:
    oauth2:
      resourceserver:
        jwt:
          # Pour la VALIDATION : Doit correspondre à l'URL publique que Keycloak met dans le token.
          issuer-uri: ${KEYCLOAK_EXTERNAL_URL}/realms/${KEYCLOAK_REALM}
          # Pour la CONNEXION : Doit utiliser une URL interne pour que le backend puisse joindre Keycloak.
          jwk-set-uri: ${KEYCLOAK_INTERNAL_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs
          connection-timeout: 10000 # Timeout en millisecondes pour les requêtes de validation de jeton
          read-timeout: 10000 # Timeout en millisecondes pour les requêtes de validation de jeton

# Configuration des retries, pour gérer les indisponibilités temporaires de ses dépendances. C'est une approche moderne et très robuste, souvent préférée dans les architectures microservices.
resilience4j:
  retry:
    instances:
      keycloak:
        max-attempts: 5
        wait-duration: 10s

# ===================================================
# CONFIGURATION KEYCLOAK ADMIN CLIENT
# ===================================================
keycloak:
  admin:
    server-url: ${KEYCLOAK_INTERNAL_URL:-http://keycloak:8080}
    realm: ${KEYCLOAK_REALM:-hscode-realm}
    client-id: ${KEYCLOAK_BACKEND_CLIENT:-backend-client}
    client-secret: ${KEYCLOAK_BACKEND_CLIENT_SECRET:-backend-secret-keycloak-251017}
  registration:
    realm: ${KEYCLOAK_REALM:hscode-realm}


# ===================================================
# CONFIGURATION LOGGING
# ===================================================
logging:
  level:
    root: INFO
    com.muhend.backend: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG


# ===================================================
# CONFIGURATION SERVICES IA
# ===================================================
openai:
  openai-api-key: ${OPENAI_API_KEY}
  model: ${OPENAI_MODEL:gpt-4}

anthropic:
  api-key: ${ANTHROPIC_API_KEY}
  model: ${ANTHROPIC_MODEL:claude-3-sonnet-20240229}

ollama:
  api-key: ${OLLAMA_API_KEY}
  base-url: ${OLLAMA_BASE_URL:http://localhost:11434}

# ===================================================
# PROFILS SPRING
# ===================================================
---
# Profil DÉVELOPPEMENT
spring:
  config:
    activate:
      on-profile: ${SPRING_PROFILES_ACTIVE}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

logging:
  level:
    root: DEBUG
    com.muhend.backend: DEBUG

---
# Profil PRODUCTION
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    hibernate:
      ddl-auto: validate  # Ne pas modifier le schéma automatiquement
    show-sql: false

logging:
  level:
    root: WARN
    com.muhend.backend: INFO
    org.springframework.security: WARN