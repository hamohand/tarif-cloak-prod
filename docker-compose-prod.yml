# ===============================================================
# DOCKER COMPOSE - APPLICATION FULL-STACK
# Stack : Angular (Frontend) | Spring Boot (Backend) | Keycloak (Auth) | PostgreSQL (DB)
# ===============================================================
# Toutes les variables sont configurables via le fichier .env
# ===============================================================

# Utilisation des champs d'extension (x-*) pour une meilleure organisation
#x-traefik-host-rule: &traefik-host-rule "Host(`${FRONTEND_DOMAIN}`) || Host(`${WWW_FRONTEND_DOMAIN}`)"
x-traefik-host-rule: &traefik-host-rule "Host(`hscode.enclume-numerique.com`) || Host(`www.hscode.enclume-numerique.com`)"

# Labels Traefik spécifiques pour le service frontend
x-traefik-frontend-labels: &traefik-frontend-labels
  traefik.enable: "true"
  traefik.docker.network: "webproxy"
  # --- Routeur HTTPS pour le frontend ---
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-secure.rule": *traefik-host-rule
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-secure.entrypoints": "websecure"
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-secure.tls.certresolver": "le"
  # --- Routeur HTTP pour la redirection vers HTTPS ---
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-http.rule": *traefik-host-rule
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-http.entrypoints": "web"
  "traefik.http.routers.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}-http.middlewares": "https-redirect@docker"
  # --- Service pointant vers le conteneur frontend ---
  "traefik.http.services.${PROJECT_NAME}-${FRONTEND_SERVICE_NAME}.loadbalancer.server.port": "${FRONTEND_INTERNAL_PORT:-80}"

########### BACKEND #############

# Labels Traefik spécifiques pour le service backend (exposé sur /api)
x-traefik-backend-labels: &traefik-backend-labels
  traefik.enable: "true"
  traefik.docker.network: "webproxy"
  # --- Définition du middleware pour ce service ---
  "traefik.http.middlewares.hscode-api-stripprefix.stripprefix.prefixes": "/api"
  # --- Routeur HTTPS pour le backend ---
  "traefik.http.routers.hscode-backend-secure.rule": "(Host(`hscode.enclume-numerique.com`) || Host(`www.hscode.enclume-numerique.com`)) && PathPrefix(`/api`)"
  "traefik.http.routers.hscode-backend-secure.entrypoints": "websecure"
  "traefik.http.routers.hscode-backend-secure.tls.certresolver": "le"
  "traefik.http.routers.hscode-backend-secure.middlewares": "hscode-api-stripprefix"
  # --- Routeur HTTP pour la redirection vers HTTPS ---
  "traefik.http.routers.hscode-backend-http.rule": "(Host(`hscode.enclume-numerique.com`) || Host(`www.hscode.enclume-numerique.com`)) && PathPrefix(`/api`)"
  "traefik.http.routers.hscode-backend-http.entrypoints": "web"
  "traefik.http.routers.hscode-backend-http.middlewares": "https-redirect" # Utilise le middleware global
  # --- Service pointant vers le conteneur backend ---
  "traefik.http.services.hscode-backend.loadbalancer.server.port": "8081"

# Ancres YAML pour factoriser les variables communes
x-common-app-bd-vars: &common-app-bd-vars
  POSTGRES_DB: "${POSTGRES_DB}"
  POSTGRES_USER: "${POSTGRES_USER}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

x-common-bd-keycloak-vars: &common-bd-keycloak-vars
  POSTGRES_DB: "${KEYCLOAK_DB:-keycloak}"
  POSTGRES_USER: "${KEYCLOAK_DB_USER:-keycloak}"
  POSTGRES_PASSWORD: "${KEYCLOAK_DB_PASSWORD}"

#x-common-bd-app-keycloak-vars: &common-bd-app-keycloak-vars
#  POSTGRES_DB: "${POSTGRES_DB}"
#  POSTGRES_USER: "${POSTGRES_USER}"
#  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"


services:

  # ===============================================================
  # BASE DE DONNÉES POSTGRESQL POUR L'APPLICATION
  # ===============================================================
  app-db:
    image: "postgres:${POSTGRES_IMAGE_TAG:-16}"
    container_name: "${PROJECT_NAME:-app}-app-db"
    environment:
      <<: *common-app-bd-vars
#    ports:
#      - "${DB_HOST_PORT:-5432}:5432"
    volumes:
      - app-database-data:/var/lib/postgresql/data
      - ./sql/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - default

  # ===============================================================
  # BASE DE DONNÉES POSTGRESQL POUR KEYCLOAK
  # ===============================================================
  keycloak-db:
    image: "postgres:${POSTGRES_IMAGE_TAG:-16}"
    container_name: "${PROJECT_NAME:-app}-keycloak-db"
    environment:
      <<: *common-bd-keycloak-vars
#    ports:
#      - "${KEYCLOAK_DB_PORT:-5433}:5432"  # Port différent pour éviter les conflits
    volumes:
      - keycloak-database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${KEYCLOAK_DB_USER}", "-d", "${KEYCLOAK_DB}"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - default

  # ===============================================================
  # KEYCLOAK - AUTHENTIFICATION ET AUTORISATION
  # ===============================================================
  keycloak:
    image: "quay.io/keycloak/keycloak:${KEYCLOAK_IMAGE_TAG:-22.0.1}"
    container_name: "${PROJECT_NAME:-app}-keycloak"
    environment:
      # Configuration Base de données
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://${DB_KEYCLOAK_SERVICE_NAME:-keycloak-db}:5432/${KEYCLOAK_DB}"
      KC_DB_USERNAME: "${KEYCLOAK_DB_USER:-keycloak}"
      KC_DB_PASSWORD: "${KEYCLOAK_DB_PASSWORD}"
      # Credentials Admin
      KEYCLOAK_ADMIN: "${KEYCLOAK_ADMIN_USER:-admin}"
      KEYCLOAK_ADMIN_PASSWORD: "${KEYCLOAK_ADMIN_PASSWORD:-admin}"
      # Configuration Réseau pour un reverse proxy
      KC_PROXY: "edge"
#      KC_HOSTNAME: "${KEYCLOAK_HOSTNAME:-localhost}"
      KC_HOSTNAME: "auth.hscode.enclume-numerique.com"
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
    labels:
      #Labels pour exposer Keycloak via Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=webproxy"
      # --- Routeur HTTPS pour Keycloak ---
      - "traefik.http.routers.hscode-keycloak-secure.rule=Host(`auth.hscode.enclume-numerique.com`)"
      - "traefik.http.routers.hscode-keycloak-secure.entrypoints=websecure"
      - "traefik.http.routers.hscode-keycloak-secure.tls.certresolver=le"
      # --- Routeur HTTP pour la redirection vers HTTPS ---
      - "traefik.http.routers.hscode-keycloak-http.rule=Host(`auth.hscode.enclume-numerique.com`)"
      - "traefik.http.routers.hscode-keycloak-http.entrypoints=web"
      - "traefik.http.routers.hscode-keycloak-http.middlewares=https-redirect" # Utilise le middleware global
      # --- Service pointant vers le conteneur Keycloak sur le port 8080 ---
      - "traefik.http.services.hscode-keycloak.loadbalancer.server.port=8080"
    # Le port n'est plus exposé directement, le reverse proxy s'en chargera
    # ports:
    #   - "${SECURITE_INTERNAL_PORT:-8080}:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command:
      - start
      - --import-realm
    depends_on:
      keycloak-db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - default
      # Connecter Keycloak au réseau de Traefik
      - webproxy

  # ===============================================================
  # BACKEND - API SPRING BOOT
  # ===============================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: "${PROJECT_NAME:-app}-backend"
    depends_on:
      app-db:
        condition: service_healthy
      keycloak:
        condition: service_started
#    ports:
#      - "${BACKEND_INTERNAL_PORT:-8081}:8081"
    environment:
      # Configuration Spring Boot
      BACKEND_INTERNAL_PORT: "${BACKEND_INTERNAL_PORT:-8081}"
      SPRING_PROFILES_ACTIVE: "${SPRING_PROFILES_ACTIVE:-prod}"
      # Configuration Database APPLICATION
      DB_SERVICE_NAME: "app-db"                    # ← Nom du service de base de données
      <<: *common-app-bd-vars
      # Configuration Keycloak
      KEYCLOAK_REALM: "${KEYCLOAK_REALM}"
      KEYCLOAK_BACKEND_CLIENT: "${KEYCLOAK_BACKEND_CLIENT}"
      KEYCLOAK_BACKEND_CLIENT_SECRET: "${KEYCLOAK_BACKEND_CLIENT_SECRET}"
      KEYCLOAK_INTERNAL_URL: "${KEYCLOAK_INTERNAL_URL:-http://keycloak:8080}"
      KEYCLOAK_EXTERNAL_URL: "${KEYCLOAK_EXTERNAL_URL:-http://localhost:8080}"
      # Ajouter l'URL pour que le backend puisse atteindre Ollama sur la machine hôte
      OLLAMA_BASE_URL: "http://host.docker.internal:11434"
      # Configuration OpenAI et autres services IA
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      OLLAMA_API_KEY: "${OLLAMA_API_KEY}"
      # Pour Traefik
      FRONTEND_DOMAIN: "${FRONTEND_DOMAIN}"
      WWW_FRONTEND_DOMAIN: "${WWW_FRONTEND_DOMAIN}"
      PROJECT_NAME: "${PROJECT_NAME}"
      FRONTEND_SERVICE_NAME: "${FRONTEND_SERVICE_NAME}"
    labels:
      <<: *traefik-backend-labels
    restart: unless-stopped
    networks:
      - default
      - webproxy

  # ===============================================================
  # FRONTEND - APPLICATION ANGULAR
  # ===============================================================
  frontend:
    container_name: "${PROJECT_NAME:-app}-frontend"
    build:
      context: ./frontend
      args:
        # Indique au Dockerfile d'utiliser KEYCLOAK_EXTERNAL_URL et la conf de prod
        KEYCLOAK_EXTERNAL_URL: "https://auth.hscode.enclume-numerique.com"
        NGINX_CONF: nginx-prod.conf
        # Variables Keycloak passées au build-time
        KEYCLOAK_REALM: "${KEYCLOAK_REALM}"
        KEYCLOAK_FRONTEND_CLIENT: "${KEYCLOAK_FRONTEND_CLIENT}"
        KEYCLOAK_INTERNAL_URL: "${KEYCLOAK_INTERNAL_URL}"
        API_URL: "/api"

    environment:
      FRONTEND_DOMAIN: "${FRONTEND_DOMAIN}"
      WWW_FRONTEND_DOMAIN: "${WWW_FRONTEND_DOMAIN}"
      PROJECT_NAME: "${PROJECT_NAME}"
      FRONTEND_SERVICE_NAME: "${FRONTEND_SERVICE_NAME}"
      FRONTEND_INTERNAL_PORT: "${FRONTEND_INTERNAL_PORT:-80}"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=webproxy"
      # --- Service Traefik pointant vers le conteneur frontend sur le port 80 ---
      - "traefik.http.services.hscode-frontend.loadbalancer.server.port=80"

      # --- Routeur HTTPS pour le frontend ---
      - "traefik.http.routers.hscode-frontend-secure.rule=Host(`hscode.enclume-numerique.com`) || Host(`www.hscode.enclume-numerique.com`)"
      - "traefik.http.routers.hscode-frontend-secure.entrypoints=websecure"
      - "traefik.http.routers.hscode-frontend-secure.tls.certresolver=le"
      # --- LIAISON EXPLICITE ---
      - "traefik.http.routers.hscode-frontend-secure.service=hscode-frontend"

      # --- Routeur HTTP pour la redirection vers HTTPS ---
      - "traefik.http.routers.hscode-frontend-http.rule=Host(`hscode.enclume-numerique.com`) || Host(`www.hscode.enclume-numerique.com`)"
      - "traefik.http.routers.hscode-frontend-http.entrypoints=web"
      - "traefik.http.routers.hscode-frontend-http.middlewares=https-redirect"
      # --- LIAISON EXPLICITE ---
      - "traefik.http.routers.hscode-frontend-http.service=hscode-frontend"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - default
      - webproxy

# ===============================================================
# VOLUMES PERSISTANTS
# ===============================================================
volumes:
  app-database-data:
    name: "${PROJECT_NAME:-app}-app-data"
  keycloak-database-data:
    name: "${PROJECT_NAME:-app}-keycloak-data"

# ===============================================================
# RÉSEAUX
# ===============================================================
networks:
  webproxy:
    external: true
  default:
